// Code generated by sqlc-http (https://github.com/walterwanderley/sqlc-http).

package main

import (
	"database/sql"
	"embed"
	"fmt"

	"github.com/golang-migrate/migrate/v4"
	driver "github.com/golang-migrate/migrate/v4/database/{{if eq .Database "postgresql"}}pgx/v5{{else if eq .Database "sqlite"}}sqlite3{{else}}{{.Database}}{{end}}"
	"github.com/golang-migrate/migrate/v4/source/iofs"
	"github.com/pressly/goose/v3"
)

//go:embed {{.MigrationPath}}
var migrations embed.FS

func ensureSchema(db *sql.DB) error {
	{{if eq .MigrationLib "migrate"}}source, err := iofs.New(migrations, "{{.MigrationPath}}")
	if err != nil {
		return err
	}
	target, err := driver.WithInstance(db, new(driver.Config))
	if err != nil {
		return err
	}
	m, err := migrate.NewWithInstance("iofs", source, "{{.Database}}", target)
	if err != nil {
		return err
	}
	err = m.Up()
	if err != nil && err != migrate.ErrNoChange {
		return err
	}
	return source.Close(){{else}}goose.SetBaseFS(migrations)

    if err := goose.SetDialect("{{if eq .Database "postgresql"}}postgres{{else}}{{.Database}}{{end}}"); err != nil {
        return err
    }

    return goose.Up(db, "{{.MigrationPath}}")
	{{end}}
}