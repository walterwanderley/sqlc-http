// Code generated by sqlc-http (https://github.com/walterwanderley/sqlc-http). DO NOT EDIT.

package {{.Package}}

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"log/slog"
	"net"
	"net/http"
	"strconv"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/jackc/pgx/v5/pgxpool"

	"{{.GoModule}}/internal/server"	
	"{{.GoModule}}/view"
)
	
type Service struct {
	querier {{if .EmitInterface}}Querier{{else}}*Queries{{end}}
	{{if .EmitDbArgument}}db {{if eq .SqlPackage "pgx/v5"}}*pgxpool.Pool{{else}}*sql.DB{{end}}{{end}}
}

{{$emitDbArgument := .EmitDbArgument}}
{{ range .Services }}
func (s *Service) handle{{.Name | UpperFirstCharacter}}() http.HandlerFunc {
	{{ range HandlerTypes . UI}}{{ .}}
	{{end}}
	return func(w http.ResponseWriter, r *http.Request) {
		{{ range . | Input}}{{ .}}
		{{end}}
		{{if . | HasPagination}}if arg.Limit < 1 { arg.Limit = 10 }
		{{end}}
		{{if not .EmptyOutput}}result, err := {{else}}err {{if not (or .EmptyInput (and (ne (. | HttpMethod) "GET") (ne (. | HttpMethod) "DELETE"))) }}:{{end}}= {{end}}s.querier.{{ .Name}}(r.Context(){{if $emitDbArgument}}, s.db{{end}}{{ .ParamsCallDatabase}})
		if err != nil {
			slog.Error("sql call failed", "error", err, "method", "{{.Name}}")
			http.Error(w, err.Error(), http.StatusInternalServerError)	
			return
		}
		{{if UI}}{{if . | HasPagination}}r = r.WithContext(view.ContextWithPagination(r.Context(), &view.Pagination{
			Limit: req.Limit,
			Offset: req.Offset,
		})){{end}}
		{{range . | OutputUI}}{{ .}}
		{{end -}}{{else}}
		{{ range . | Output}}{{ .}}
		{{end -}}{{end -}}
	}
}
{{ end }}
