// Code generated by sqlc-http (https://github.com/walterwanderley/sqlc-http).

package server

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-playground/form/v4"

	"{{ .GoModule}}/view"
)

var formDecoder *form.Decoder

func init() {
	formDecoder = form.NewDecoder()
	formDecoder.SetTagName("json")
	{{if UI}}
	formDecoder.RegisterCustomTypeFunc(func(vals []string) (interface{}, error) {
		if vals[0] == "" {
			return time.Time{}, nil
		}		
		return time.ParseInLocation(time.DateOnly, vals[0], time.Local)
	}, time.Time{}){{end}}
}

func Decode[T any](r *http.Request) (T, error) {
	var v T
	if r.Header.Get("Content-Type") == "application/x-www-form-urlencoded" {
		if err := r.ParseForm(); err != nil {
			return v, fmt.Errorf("parse form: %w", err)
		}
		if err := formDecoder.Decode(&v, r.Form) ; err != nil {
			return v, fmt.Errorf("decode form: %w", err)
		}
	} else {
		if err := json.NewDecoder(r.Body).Decode(&v); err != nil {
			return v, fmt.Errorf("decode json: %w", err)
		}
	}
	return v, nil
}

func Encode[T any](w http.ResponseWriter, r *http.Request, status int, v T) error {
	{{if UI}}if !strings.Contains(r.Header.Get("Accept"), "application/json") {
		if err := view.RenderHTML(w, r, v); err != nil {
			slog.Error("render html", "error", err)
		}
		return nil
	}{{end}}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)	
	if err := json.NewEncoder(w).Encode(v); err != nil {
		return fmt.Errorf("encode json: %w", err)
	}
	return nil
}
