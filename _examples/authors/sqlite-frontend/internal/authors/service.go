// Code generated by sqlc-http (https://github.com/walterwanderley/sqlc-http). DO NOT EDIT.

package authors

import (
	"database/sql"
	"fmt"
	"log/slog"
	"net/http"
	"strconv"
	"time"

	"authors/internal/server"
	"authors/internal/server/htmx"
	"authors/templates"
)

type Service struct {
	querier *Queries
}

func (s *Service) handleCreateAuthor() http.HandlerFunc {
	type request struct {
		Name      string     `json:"name"`
		Bio       *string    `json:"bio"`
		CreatedAt *time.Time `json:"created_at"`
	}
	type response struct {
		LastInsertId int64 `json:"last_insert_id"`
		RowsAffected int64 `json:"rows_affected"`
	}

	return func(w http.ResponseWriter, r *http.Request) {
		req, err := server.Decode[request](r)
		if err != nil {
			http.Error(w, err.Error(), http.StatusUnprocessableEntity)
			return
		}
		var arg CreateAuthorParams
		arg.Name = req.Name
		if req.Bio != nil {
			arg.Bio = sql.NullString{Valid: true, String: *req.Bio}
		}
		if req.CreatedAt != nil && !req.CreatedAt.IsZero() {
			arg.CreatedAt.Valid = true
			arg.CreatedAt.Time = *req.CreatedAt
		}

		result, err := s.querier.CreateAuthor(r.Context(), arg)
		if err != nil {
			slog.Error("sql call failed", "error", err, "method", "CreateAuthor")
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		lastInsertId, _ := result.LastInsertId()
		rowsAffected, _ := result.RowsAffected()
		r = r.WithContext(templates.ContextWithMessage(r.Context(),
			htmx.SuccessMessage(http.StatusOK, fmt.Sprintf("Last insert ID: %d", lastInsertId))))
		server.Encode(w, r, http.StatusOK, response{
			LastInsertId: lastInsertId,
			RowsAffected: rowsAffected,
		})
	}
}

func (s *Service) handleDeleteAuthor() http.HandlerFunc {
	type request struct {
		Id int64 `json:"id"`
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var req request
		if str := r.PathValue("id"); str != "" {
			if v, err := strconv.ParseInt(str, 10, 64); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			} else {
				req.Id = v
			}
		}
		id := req.Id

		err := s.querier.DeleteAuthor(r.Context(), id)
		if err != nil {
			slog.Error("sql call failed", "error", err, "method", "DeleteAuthor")
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

	}
}

func (s *Service) handleGetAuthor() http.HandlerFunc {
	type request struct {
		Id int64 `json:"id"`
	}
	type response struct {
		ID        int64      `json:"id,omitempty"`
		Name      string     `json:"name,omitempty"`
		Bio       *string    `json:"bio,omitempty"`
		CreatedAt *time.Time `json:"created_at,omitempty"`
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var req request
		if str := r.PathValue("id"); str != "" {
			if v, err := strconv.ParseInt(str, 10, 64); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			} else {
				req.Id = v
			}
		}
		id := req.Id

		result, err := s.querier.GetAuthor(r.Context(), id)
		if err != nil {
			slog.Error("sql call failed", "error", err, "method", "GetAuthor")
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		var res response
		res.ID = result.ID
		res.Name = result.Name
		if result.Bio.Valid {
			res.Bio = &result.Bio.String
		}
		if result.CreatedAt.Valid {
			res.CreatedAt = &result.CreatedAt.Time
		}
		server.Encode(w, r, http.StatusOK, res)
	}
}

func (s *Service) handleListAuthors() http.HandlerFunc {
	type request struct {
		Limit  int64 `json:"limit"`
		Offset int64 `json:"offset"`
	}
	type response struct {
		ID        int64      `json:"id,omitempty"`
		Name      string     `json:"name,omitempty"`
		Bio       *string    `json:"bio,omitempty"`
		CreatedAt *time.Time `json:"created_at,omitempty"`
	}

	return func(w http.ResponseWriter, r *http.Request) {
		var req request
		if str := r.URL.Query().Get("limit"); str != "" {
			if v, err := strconv.ParseInt(str, 10, 64); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			} else {
				req.Limit = v
			}
		}
		if str := r.URL.Query().Get("offset"); str != "" {
			if v, err := strconv.ParseInt(str, 10, 64); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			} else {
				req.Offset = v
			}
		}
		var arg ListAuthorsParams
		arg.Limit = req.Limit
		arg.Offset = req.Offset

		if arg.Limit < 1 {
			arg.Limit = 10
		}

		result, err := s.querier.ListAuthors(r.Context(), arg)
		if err != nil {
			slog.Error("sql call failed", "error", err, "method", "ListAuthors")
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		r = r.WithContext(templates.ContextWithPagination(r.Context(), &templates.Pagination{
			Limit:  req.Limit,
			Offset: req.Offset,
		}))
		res := make([]response, 0)
		for _, r := range result {
			var item response
			item.ID = r.ID
			item.Name = r.Name
			if r.Bio.Valid {
				item.Bio = &r.Bio.String
			}
			if r.CreatedAt.Valid {
				item.CreatedAt = &r.CreatedAt.Time
			}
			res = append(res, item)
		}
		server.Encode(w, r, http.StatusOK, res)
	}
}

func (s *Service) handleUpdateAuthor() http.HandlerFunc {
	type request struct {
		Name      string     `json:"name"`
		Bio       *string    `json:"bio"`
		CreatedAt *time.Time `json:"created_at"`
		ID        int64      `json:"id"`
	}
	type response struct {
		LastInsertId int64 `json:"last_insert_id"`
		RowsAffected int64 `json:"rows_affected"`
	}

	return func(w http.ResponseWriter, r *http.Request) {
		req, err := server.Decode[request](r)
		if err != nil {
			http.Error(w, err.Error(), http.StatusUnprocessableEntity)
			return
		}
		if str := r.PathValue("id"); str != "" {
			if v, err := strconv.ParseInt(str, 10, 64); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			} else {
				req.ID = v
			}
		}
		var arg UpdateAuthorParams
		arg.Name = req.Name
		if req.Bio != nil {
			arg.Bio = sql.NullString{Valid: true, String: *req.Bio}
		}
		if req.CreatedAt != nil && !req.CreatedAt.IsZero() {
			arg.CreatedAt.Valid = true
			arg.CreatedAt.Time = *req.CreatedAt
		}
		arg.ID = req.ID

		result, err := s.querier.UpdateAuthor(r.Context(), arg)
		if err != nil {
			slog.Error("sql call failed", "error", err, "method", "UpdateAuthor")
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		lastInsertId, _ := result.LastInsertId()
		rowsAffected, _ := result.RowsAffected()
		r = r.WithContext(templates.ContextWithMessage(r.Context(),
			htmx.SuccessMessage(http.StatusOK, fmt.Sprintf("Rows affected: %d", rowsAffected))))
		server.Encode(w, r, http.StatusOK, response{
			LastInsertId: lastInsertId,
			RowsAffected: rowsAffected,
		})
	}
}

func (s *Service) handleUpdateAuthorBio() http.HandlerFunc {
	type request struct {
		Bio *string `json:"bio"`
		ID  int64   `json:"id"`
	}
	type response struct {
		LastInsertId int64 `json:"last_insert_id"`
		RowsAffected int64 `json:"rows_affected"`
	}

	return func(w http.ResponseWriter, r *http.Request) {
		req, err := server.Decode[request](r)
		if err != nil {
			http.Error(w, err.Error(), http.StatusUnprocessableEntity)
			return
		}
		if str := r.PathValue("id"); str != "" {
			if v, err := strconv.ParseInt(str, 10, 64); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			} else {
				req.ID = v
			}
		}
		var arg UpdateAuthorBioParams
		if req.Bio != nil {
			arg.Bio = sql.NullString{Valid: true, String: *req.Bio}
		}
		arg.ID = req.ID

		result, err := s.querier.UpdateAuthorBio(r.Context(), arg)
		if err != nil {
			slog.Error("sql call failed", "error", err, "method", "UpdateAuthorBio")
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		lastInsertId, _ := result.LastInsertId()
		rowsAffected, _ := result.RowsAffected()
		r = r.WithContext(templates.ContextWithMessage(r.Context(),
			htmx.SuccessMessage(http.StatusOK, fmt.Sprintf("Rows affected: %d", rowsAffected))))
		server.Encode(w, r, http.StatusOK, response{
			LastInsertId: lastInsertId,
			RowsAffected: rowsAffected,
		})
	}
}
