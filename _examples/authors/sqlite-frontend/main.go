// Code generated by sqlc-http (https://github.com/walterwanderley/sqlc-http).

package main

import (
	"context"
	"database/sql"
	"embed"
	_ "embed"
	"errors"
	"flag"
	"fmt"
	"log/slog"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"runtime"
	"syscall"
	"time"

	"go.uber.org/automaxprocs/maxprocs"
	// database driver
	_ "github.com/mattn/go-sqlite3"

	"authors/internal/server/etag"
	"authors/internal/server/litefs"
	"authors/internal/server/litestream"
	"authors/templates"
)

//go:generate sqlc-http -m authors -migration-path sql/migrations -litefs -litestream -frontend -append

const (
	serviceName    = "authors"
	forwardTimeout = 10 * time.Second
)

var (
	dev            bool
	dbURL          string
	port           int
	replicationURL string

	litefsConfig litefs.Config
	liteFS       *litefs.LiteFS
	//go:embed openapi.yml
	openAPISpec []byte
	//go:embed web
	webFS embed.FS
)

func main() {
	flag.StringVar(&dbURL, "db", "", "The Database connection URL")
	flag.IntVar(&port, "port", 5000, "The server port")

	flag.BoolVar(&dev, "dev", false, "Set logger to development mode and enable Hot Reload on edit templates files")

	flag.StringVar(&replicationURL, "replication", "", "S3 replication URL")
	litefs.SetFlags(&litefsConfig)
	flag.Parse()

	dbURL = filepath.Join(litefsConfig.MountDir, dbURL)

	initLogger()

	if err := run(); err != nil && !errors.Is(err, http.ErrServerClosed) {
		slog.Error("server error", "error", err)
		os.Exit(1)
	}
}

func run() error {
	_, err := maxprocs.Set()
	if err != nil {
		slog.Warn("startup", "error", err)
	}
	slog.Info("startup", "GOMAXPROCS", runtime.GOMAXPROCS(0))

	db, err := sql.Open("sqlite3", dbURL)
	if err != nil {
		return err
	}
	defer db.Close()

	if replicationURL != "" {
		slog.Info("replication", "url", replicationURL)
		lsdb, err := litestream.Replicate(context.Background(), dbURL, replicationURL)
		if err != nil {
			return fmt.Errorf("init replication error: %w", err)
		}
		defer lsdb.Close()
	}
	if err := ensureSchema(db); err != nil {
		return fmt.Errorf("migration error: %w", err)
	}

	mux := http.NewServeMux()
	registerHandlers(mux, db)

	mux.HandleFunc("GET /openapi.yaml", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/yaml")
		w.Write(openAPISpec)
	})

	if dev {
		mux.Handle("GET /web/", http.StripPrefix("/web", http.FileServer(http.FS(os.DirFS("web")))))
	} else {
		mux.Handle("GET /web/", etag.Handler(webFS, ""))
	}
	err = templates.RegisterHandlers(mux, dev)
	if err != nil {
		return fmt.Errorf("frontend templates error: %w", err)
	}

	var handler http.Handler = mux
	if litefsConfig.MountDir != "" {
		err := litefsConfig.Validate()
		if err != nil {
			return fmt.Errorf("liteFS parameters validation: %w", err)
		}

		liteFS, err = litefs.Start(litefsConfig)
		if err != nil {
			return fmt.Errorf("cannot start LiteFS: %w", err)
		}
		defer liteFS.Close()

		<-liteFS.ReadyCh()
		slog.Info("LiteFS cluster is ready")

		mux.HandleFunc("/nodes/", liteFS.ClusterHandler)
		handler = liteFS.ForwardToLeader(forwardTimeout, "POST", "PUT", "PATCH", "DELETE")(handler)
		handler = liteFS.ConsistentReader(forwardTimeout, "GET")(handler)
	}

	server := &http.Server{
		Addr:    fmt.Sprintf(":%d", port),
		Handler: handler,
		// Please, configure timeouts!
	}

	done := make(chan os.Signal, 1)
	signal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)
	go func() {
		sig := <-done
		slog.Warn("signal detected...", "signal", sig)
		ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
		defer cancel()
		server.Shutdown(ctx)
	}()
	slog.Info("Listening...", "port", port)
	return server.ListenAndServe()
}

func initLogger() {
	var handler slog.Handler
	opts := slog.HandlerOptions{
		AddSource: true,
	}
	switch {
	case dev:
		handler = slog.NewTextHandler(os.Stderr, &opts)
	default:
		handler = slog.NewJSONHandler(os.Stderr, &opts)
	}

	logger := slog.New(handler)
	slog.SetDefault(logger)
}
